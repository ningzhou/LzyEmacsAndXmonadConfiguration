#+TITLE: daemon process create
#+AUTHOR: zhengyu li
#+OPTIONS: ^:nil

* Description
守护进程（Daemon）是运行在后台的一种特殊进程。它独立于控制终端并且周期性地执行某种任务或等待处理某些
发生的事件。守护进程是一种很有用的进 程。 Linux的大多数服务器就是用守护进程实现的。比如，Internet服
务器inetd，Web服务器httpd等。同时，守护进程完成许多系统任务。 比如，作业规划进程crond，打印进程lpd等。
守护进程的编程本身并不复杂，复杂的是各种版本的Unix的实现机制不尽相同，造成不同 Unix环境下守护进程的
编程规则并不一致。需要注意，照搬某些书上的规则（特别是BSD4.3和低版本的System V）到Linux会出现错误的。
下面将给出Linux下守护进程的编程要点和详细实例。

** 守护进程及其特性
守护进程最重要的特性是后台运行。在这一点上DOS下的常驻内存程序TSR与之相似。其次，守护进程必须与其运行
前的环境隔离开来。这些环 境包括未关闭的文件描述符，控制终端，会话和进程组，工作目录以及文件创建掩模
等。这些环境通常是守护进程从执行它的父进程（特别是shell）中继承下 来的。最后，守护进程的启动方式有其
特殊之处。它可以在Linux系统启动时从启动脚本/etc/rc.d中启动，可以由作业规划进程crond启动，还 可以由用
户终端（通常是 shell）执行。
总之，除开这些特殊性以外，守护进程与普通进程基本上没有什么区别。因此，编写守护进程实际上是把一个普通
进程按照上述的守护进程的特性改造成为守护进程。如果对进程有比较深入的认识就更容易理解和编程了。

** 守护进程的编程要点
前面讲过，不同Unix环境下守护进程的编程规则并不一致。所幸的是守护进程的编程原则其实都一样，区别在于具
体的实现细节不同。这个原则 就是要满足守护进程的特性。同时，Linux是基于Syetem V的SVR4并遵循Posix标准，
实现起来与BSD4相比更方便。编程要点如下；
1. 在后台运行。
为避免挂起控制终端将Daemon放入后台执行。方法是在进程中调用fork使父进程终止，让Daemon在子进程中后台执行。
if(pid=fork())exit(0); //是父进程，结束父进程，子进程继续
2. 脱离控制终端，登录会话和进程组
有必要先介绍一下Linux中的进程与控制终端，登录会话和进程组之间的关系：进程属于一个进程组，进程组号
（GID）就是进程组长的进程号（PID）。登录会话可以包含多个进程组。这些进程组共享一个控制终端。这个控制
终端通常是创建进程的登录终端。 控制终端，登录会话和进程组通常是从父进程继承下来的。我们的目的就是要
摆脱它们，使之不受它们的影响。方法是在第1点的基础上，调用setsid()使进程成为会话组长：
setsid();
说明：当进程是会话组长时setsid()调用失败。但第一点已经保证进程不是会话组长。setsid()调用成功后，进程
成为新的会话组长和新的进程组长，并与原来的登录会话和进程组脱离。由于会话过程对控制终端的独占性，进程
同时与控制终端脱离。
3. 禁止进程重新打开控制终端
现在，进程已经成为无终端的会话组长。但它可以重新申请打开一个控制终端。可以通过使进程不再成为会话组长
来禁止进程重新打开控制终端：
if(pid=fork()) exit(0); //结束第一子进程，第二子进程继续（第二子进程不再是会话组长）
4. 关闭打开的文件描述符
进程从创建它的父进程那里继承了打开的文件描述符。如不关闭，将会浪费系统资源，造成进程所在的文件系统无
法卸下以及引起无法预料的错误。按如下方法关闭它们：
for(i=0;i 关闭打开的文件描述符close(i);>
5. 改变当前工作目录
进程活动时，其工作目录所在的文件系统不能卸下。一般需要将工作目录改变到根目录。对于需要转储核心，写运
行日志的进程将工作目录改变到特定目录如 /tmpchdir("/")
6. 重设文件创建掩模
进程从创建它的父进程那里继承了文件创建掩模。它可能修改守护进程所创建的文件的存取位。为防止这一点，将
文件创建掩模清除：umask(0);
7. 处理SIGCHLD信号
处理SIGCHLD信号并不是必须的。但对于某些进程，特别是服务器进程往往在请求到来时生成子进程处理请求。如
果父进程不等待子进程结 束，子进程将成为僵尸进程（zombie）从而占用系统资源。如果父进程等待子进程结束，
将增加父进程的负担，影响服务器进程的并发性能。在Linux下 可以简单地将 SIGCHLD信号的操作设为SIG_IGN。
signal(SIGCHLD,SIG_IGN);
这样，内核在子进程结束时不会产生僵尸进程。这一点与BSD4不同，BSD4下必须显式等待子进程结束才能释放僵尸
进程。

* Example
#+begin_src c
  pid_t pid, next_pid;
  int stdinfd = -1;
  int stdoutfd = -1;
  
  if (chdir("/") < 0)
  {
      printf ("chdir error!\n");
      goto cleanup;
  }
  
  pid = fork ();
  switch (pid)
  {
  case 0:
  {
      if ((stdinfd = open ("/dev/null", O_RDONLY)) < 0)
          goto cleanup;
      if ((stdoutfd = open ("/dev/null", O_WRONLY)) < 0)
          goto cleanup;
      if (dup2 (stdinfd, STDIN_FILENO) != STDIN_FILENO)
          goto cleanup;
      if (dup2 (stdoutfd, STDOUT_FILENO) != STDOUT_FILENO)
          goto cleanup;
      if (dup2 (stdoutfd, STDERR_FILENO) != STDERR_FILENO)
          goto cleanup;
  
      if (stdinfd > STDERR_FILENO && close (stdinfd) < 0)
          goto cleanup;
      if (stdoutfd > STDERR_FILENO && close (stdoutfd) < 0)
          goto cleanup;
  
      if (setsid () < 0)
          goto cleanup;
  
      next_pid = fork ();
      switch (next_pid)
      {
      case 0:
          // func ();
      case -1:
          goto cleanup;
      default:
          exit (EXIT_SUCCESS);
      }
  
  cleanup:
      close (stdoutfd);
      close (stdinfd);
      exit (EXIT_FAILURE);
  }
  
  case -1:
      goto error;
  
  default:
      // father process
      // do post process
  }
  
#+end_src

